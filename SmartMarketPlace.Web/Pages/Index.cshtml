@page
@model IndexModel
@{
    ViewData["Title"] = "Freelance Fusion - Mission Creator";
}

<style>
    :root {
        --primary: #6b46c1; /* Vibrant purple for primary elements */
        --primary-light: #a78bfa; /* Lighter purple for hover states */
        --primary-dark: #4c2c92; /* Darker purple for depth */
        --secondary: #f472b6; /* Bright pink for accents */
        --secondary-light: #f9a8d4; /* Lighter pink for hover */
        --secondary-dark: #db2777; /* Darker pink for contrast */
        --text-on-primary: #ffffff; /* White text on primary backgrounds */
        --text-on-secondary: #1f2937; /* Dark text on secondary backgrounds */
        --background: #f3e8ff; /* Soft lavender background */
        --card-bg: #ffffff; /* White card background with subtle tint */
        --gradient-bg: linear-gradient(135deg, #6b46c1, #f472b6); /* Purple-pink gradient */
        --border-radius: 16px; /* Larger, smoother radius for modern look */
        --box-shadow: 0 8px 24px rgba(107, 70, 193, 0.15); /* Purple-tinted shadow */
        --neumorphic-shadow: 8px 8px 16px rgba(107, 70, 193, 0.1), 
                            -8px -8px 16px rgba(255, 255, 255, 0.8); /* Neumorphic effect */
        --text-muted: #6b7280; /* Neutral gray for secondary text */
    }

    body {
        background: var(--background);
        font-family: 'Inter', sans-serif;
        color: #1f2937;
        overflow-x: hidden;
        position: relative;
    }

    body::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: var(--gradient-bg);
        opacity: 0.05;
        z-index: -1;
    }

    .container {
        position: relative;
        z-index: 1;
    }

    .card {
        background: var(--card-bg);
        border-radius: var(--border-radius);
        box-shadow: var(--neumorphic-shadow);
        border: 1px solid rgba(167, 139, 250, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        overflow: hidden;
        padding: 1.75rem; /* Moved padding from header to card */
    }

    .card:hover {
        transform: translateY(-6px);
        box-shadow: 0 12px 32px rgba(107, 70, 193, 0.2);
    }

    .btn-primary {
        background: var(--gradient-bg);
        border: none;
        border-radius: 8px;
        font-weight: 600;
        padding: 0.85rem 1.75rem;
        color: var(--text-on-primary);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .btn-primary::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.5s ease;
    }

    .btn-primary:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 12px rgba(107, 70, 193, 0.3);
    }

    .btn-primary:hover::before {
        left: 100%;
    }

    .btn-outline-secondary {
        color: var(--secondary);
        border-color: var(--secondary);
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-outline-secondary:hover {
        background: var(--secondary-light);
        border-color: var(--secondary-light);
        color: var(--text-on-secondary);
        transform: translateY(-3px);
    }

    .badge {
        background: var(--secondary-light) !important;
        color: var(--text-on-secondary);
        font-weight: 600;
        padding: 0.6em 1.2em;
        border-radius: 6px;
        margin-right: 0.5rem;
        margin-bottom: 0.5rem;
        transition: transform 0.2s ease;
    }

    .badge:hover {
        transform: scale(1.05);
    }

    .markdown-content {
        line-height: 1.9;
        color: var(--text-muted);
    }

    .markdown-content h2 {
        color: var(--primary-dark);
        font-size: 1.6rem;
        margin-top: 2rem;
        font-weight: 700;
    }

    .markdown-content ul {
        padding-left: 1.8rem;
        margin-bottom: 1.5rem;
    }

    .table th {
        color: var(--primary-dark);
        font-weight: 600;
        border-bottom: 2px solid var(--primary-light);
    }

    .table td {
        color: var(--text-muted);
        border-bottom: 1px solid rgba(167, 139, 250, 0.1);
    }

    .form-control, .form-select {
        background: #faf5ff;
        border-color: rgba(107, 70, 193, 0.2);
        border-radius: 8px;
        padding: 0.85rem;
        transition: all 0.3s ease;
    }

    .form-control:focus, .form-select:focus {
        border-color: var(--primary-light);
        box-shadow: 0 0 0 4px rgba(167, 139, 250, 0.2);
        background: #ffffff;
    }

    .form-label {
        color: var(--primary-dark);
        font-weight: 600;
    }

    .form-text {
        color: var(--text-muted);
    }

    .alert-danger {
        background: #fef2f2;
        border-color: var(--secondary-dark);
        color: var(--secondary-dark);
        border-radius: 8px;
        box-shadow: var(--box-shadow);
    }

    .spinner-border {
        border-color: var(--primary-light);
        border-right-color: transparent;
    }

    h1.display-4 {
        background: var(--gradient-bg);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
        font-weight: 800;
        position: relative;
        text-transform: uppercase;
        letter-spacing: 1px;
        font-size: 2.5rem; /* Slightly smaller for a unique look */
    }

    h1.display-4::after {
        content: '';
        position: absolute;
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        width: 120px; /* Slightly wider underline */
        height: 4px;
        background: var(--gradient-bg);
        border-radius: 2px;
    }

    .lead.text-muted {
        color: var(--text-muted) !important;
        font-size: 1.15rem; /* Slightly smaller for distinction */
        font-weight: 400;
        max-width: 600px; /* Constrain width for better readability */
        margin: 0 auto;
    }
</style>

<div class="container mt-5">
    <div class="row">
        <div class="col-md-12 text-center mb-5">
            <h1 class="display-4 fw-bold">Freelance Fusion - Mission Creator</h1>
            <p class="lead text-muted">Créez des missions freelance sur mesure avec des détails précis en quelques clics</p>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-md-10"> <!-- Widened form for a different layout -->
            <div class="card">
                <div class="card-body">
                    <form id="missionForm">
                        <div class="mb-4">
                            <label for="prompt" class="form-label">Décrivez votre mission idéale</label>
                            <textarea class="form-control" id="prompt" rows="5" placeholder="Exemple: Développeur Full Stack maîtrisant Node.js et Vue.js, budget 10000, ville Lyon, pays France" required></textarea>
                            <small class="form-text">Utilisez des mots-clés comme: technologie, budget, ville, pays pour optimiser les résultats</small>
                        </div>
                        <div class="mb-4">
                            <label for="language" class="form-label">Langue de la Mission</label>
                            <select class="form-select" id="language">
                                <option value="auto" selected>Auto-détection</option>
                                <option value="french">Français</option>
                                <option value="english">Anglais</option>
                                <option value="arabic">Arabe</option>
                                <option value="spanish">Espagnol</option>
                            </select>
                        </div>
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <button type="submit" class="btn btn-primary" id="generateBtn">Créer la Mission</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="row justify-content-center mt-5">
        <div class="col-md-10">
            <div id="loadingIndicator" class="text-center d-none">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Chargement...</span>
                </div>
                <p class="mt-3 text-muted">Création de la mission en cours... Veuillez patienter.</p>
            </div>
            <div id="resultContainer" class="d-none">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 id="missionTitle" class="mb-0">Mission Générée</h5>
                            <button class="btn btn-sm btn-outline-secondary" id="copyJsonBtn">Copier JSON</button>
                        </div>
                        <div class="row">
                            <div class="col-md-7"> <!-- Adjusted column width -->
                                <h6 id="descriptionLabel" class="fw-semibold">Description</h6>
                                <div id="missionDescription" class="markdown-content mb-4"></div>
                                
                                <h6 id="expertiseLabel" class="fw-semibold">Compétences Requises</h6>
                                <div id="requiredExpertise" class="mb-4"></div>
                            </div>
                            <div class="col-md-5"> <!-- Adjusted column width -->
                                <div class="card">
                                    <div class="card-body">
                                        <h6 id="detailsLabel" class="fw-semibold">Informations Clés</h6>
                                        <table class="table table-sm">
                                            <tbody>
                                                <tr>
                                                    <th id="positionLabel">Rôle</th>
                                                    <td id="position"></td>
                                                </tr>
                                                <tr>
                                                    <th id="locationLabel">Localisation</th>
                                                    <td id="location"></td>
                                                </tr>
                                                <tr>
                                                    <th id="workModeLabel">Mode de Travail</th>
                                                    <td id="workMode"></td>
                                                </tr>
                                                <tr>
                                                    <th id="durationLabel">Durée</th>
                                                    <td id="duration"></td>
                                                </tr>
                                                <tr>
                                                    <th id="experienceLabel">Expérience</th>
                                                    <td id="experience"></td>
                                                </tr>
                                                <tr>
                                                    <th id="contractTypeLabel">Type de Contrat</th>
                                                    <td id="contractType"></td>
                                                </tr>
                                                <tr>
                                                    <th id="dailyRateLabel">TJM</th>
                                                    <td id="dailyRate"></td>
                                                </tr>
                                                <tr>
                                                    <th id="domainLabel">Secteur</th>
                                                    <td id="domain"></td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="errorContainer" class="alert alert-danger mt-4 d-none">
                <h5>Erreur</h5>
                <p id="errorMessage"></p>
                <div id="rawErrorDetails" class="mt-3 d-none">
                    <hr>
                    <h6>Détails Techniques</h6>
                    <pre id="rawErrorContent" class="bg-light p-3 rounded" style="max-height: 200px; overflow: auto;"></pre>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const apiUrl = '@Model.ApiBaseUrl/api/JobMission/generate';
            let generatedJson = null;
            
            const defaultLabels = {
                description: "Description",
                expertise: "Compétences Requises",
                details: "Informations Clés",
                position: "Rôle",
                location: "Localisation",
                workMode: "Mode de Travail",
                duration: "Durée",
                experience: "Expérience",
                contractType: "Type de Contrat",
                dailyRate: "TJM",
                domain: "Secteur"
            };
            
            const placeholders = {
                french: "Exemple: Développeur Full Stack maîtrisant Node.js et Vue.js, budget 10000, ville Lyon, pays France",
                english: "Example: Full Stack Developer skilled in Node.js and Vue.js, budget 10000, city London, country UK",
                arabic: "مثال: مطور ويب كامل مع خبرة في Node.js وVue.js، ميزانية 10000، المدينة الرياض، البلد السعودية",
                spanish: "Ejemplo: Desarrollador Full Stack con experiencia en Node.js y Vue.js, presupuesto 10000, ciudad Madrid, país España"
            };
            
            document.getElementById('language').addEventListener('change', function() {
                const selectedLanguage = this.value;
                document.getElementById('prompt').placeholder = placeholders[selectedLanguage] || placeholders.french;
            });
            
            function updateUILabels(labels, detectedLanguage) {
                const uiLabels = labels || defaultLabels;
                
                document.getElementById('descriptionLabel').textContent = uiLabels.description || defaultLabels.description;
                document.getElementById('expertiseLabel').textContent = uiLabels.expertise || defaultLabels.expertise;
                document.getElementById('detailsLabel').textContent = uiLabels.details || defaultLabels.details;
                document.getElementById('positionLabel').textContent = uiLabels.position || defaultLabels.position;
                document.getElementById('locationLabel').textContent = uiLabels.location || defaultLabels.location;
                document.getElementById('workModeLabel').textContent = uiLabels.workMode || defaultLabels.workMode;
                document.getElementById('durationLabel').textContent = uiLabels.duration || defaultLabels.duration;
                document.getElementById('experienceLabel').textContent = uiLabels.experience || defaultLabels.experience;
                document.getElementById('contractTypeLabel').textContent = uiLabels.contractType || defaultLabels.contractType;
                document.getElementById('dailyRateLabel').textContent = uiLabels.dailyRate || defaultLabels.dailyRate;
                document.getElementById('domainLabel').textContent = uiLabels.domain || defaultLabels.domain;
                
                if (detectedLanguage) {
                    const languageSelect = document.getElementById('language');
                    for (let i = 0; i < languageSelect.options.length; i++) {
                        if (languageSelect.options[i].value === detectedLanguage) {
                            languageSelect.selectedIndex = i;
                            break;
                        }
                    }
                }
            }
            
            updateUILabels(defaultLabels);
            
            document.getElementById('missionForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const prompt = document.getElementById('prompt').value;
                const language = document.getElementById('language').value;
                
                if (!prompt) {
                    showError('Veuillez décrire la mission');
                    return;
                }
                
                document.getElementById('loadingIndicator').classList.remove('d-none');
                document.getElementById('resultContainer').classList.add('d-none');
                document.getElementById('errorContainer').classList.add('d-none');
                
                try {
                    console.log('Sending request to:', apiUrl);
                    console.log('Request payload:', { prompt, language });
                    
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            prompt: prompt,
                            language: language
                        })
                    });
                    
                    console.log('Response status:', response.status);
                    const data = await response.json();
                    console.log('Response data:', data);
                    
                    if (!response.ok) {
                        throw new Error(data.error || 'Échec de la création de la mission');
                    }
                    
                    if (data.error) {
                        throw new Error(data.error);
                    }
                    
                    generatedJson = data;
                    
                    updateUILabels(data.uiLabels, data.detectedLanguage);
                    
                    displayMission(data);
                } catch (error) {
                    console.error('Error:', error);
                    showError(error.message || 'Échec de la connexion à l\'API. Vérifiez que l\'API est en cours d\'exécution.');
                } finally {
                    document.getElementById('loadingIndicator').classList.add('d-none');
                }
            });
            
            document.getElementById('copyJsonBtn').addEventListener('click', function() {
                if (generatedJson) {
                    navigator.clipboard.writeText(JSON.stringify(generatedJson, null, 2))
                        .then(() => {
                            const btn = this;
                            const originalText = btn.textContent;
                            btn.textContent = 'Copié !';
                            setTimeout(() => {
                                btn.textContent = originalText;
                            }, 2000);
                        })
                        .catch(err => {
                            console.error('Failed to copy: ', err);
                        });
                }
            });
            
            function displayMission(mission) {
                document.getElementById('missionTitle').textContent = mission.title || 'Mission Générée';
                
                const descriptionEl = document.getElementById('missionDescription');
                descriptionEl.innerHTML = mission.description ? marked.parse(mission.description) : 'Aucune description fournie';
                
                const expertiseEl = document.getElementById('requiredExpertise');
                expertiseEl.innerHTML = '';
                if (mission.requiredExpertises && mission.requiredExpertises.length > 0) {
                    mission.requiredExpertises.forEach(skill => {
                        const badge = document.createElement('span');
                        badge.className = 'badge me-2 mb-2';
                        badge.textContent = skill;
                        expertiseEl.appendChild(badge);
                    });
                } else {
                    expertiseEl.textContent = 'Aucune compétence spécifiée';
                }
                
                document.getElementById('position').textContent = mission.position || 'Non spécifié';
                document.getElementById('location').textContent = mission.city && mission.country ? 
                    `${mission.city}, ${mission.country}` : 'Non spécifié';
                document.getElementById('workMode').textContent = mission.workMode || 'Non spécifié';
                document.getElementById('duration').textContent = mission.duration && mission.durationType ? 
                    `${mission.duration} ${mission.durationType}` : 'Non spécifié';
                document.getElementById('experience').textContent = mission.experienceYear || 'Non spécifié';
                document.getElementById('contractType').textContent = mission.contractType || 'Non spécifié';
                document.getElementById('dailyRate').textContent = mission.estimatedDailyRate ? 
                    `${mission.estimatedDailyRate} EUR` : 'Non spécifié';
                document.getElementById('domain').textContent = mission.domain || 'Non spécifié';
                
                document.getElementById('resultContainer').classList.remove('d-none');
            }
            
            function showError(message, rawDetails = null) {
                const errorContainer = document.getElementById('errorContainer');
                document.getElementById('errorMessage').textContent = message;
                
                const rawErrorDetails = document.getElementById('rawErrorDetails');
                const rawErrorContent = document.getElementById('rawErrorContent');
                
                if (rawDetails) {
                    rawErrorContent.textContent = typeof rawDetails === 'object' ? 
                        JSON.stringify(rawDetails, null, 2) : rawDetails;
                    rawErrorDetails.classList.remove('d-none');
                } else {
                    rawErrorDetails.classList.add('d-none');
                }
                
                errorContainer.classList.remove('d-none');
            }
        });
    </script>
}